name: Publish to PyPI

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g., 0.1.0)'
        required: true
        default: '0.1.0'
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'pypi'
        type: choice
        options:
          - testpypi
          - pypi

permissions:
  contents: write
  id-token: write  # Required for trusted publishing

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Run tests
        run: pytest --cov=serp_forge

  build:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      package-version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history for version detection

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine check-manifest

      - name: Determine version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
            echo "Manual release version: $VERSION"
          else
            VERSION="${{ github.ref_name }}"
            VERSION="${VERSION#v}"  # Remove 'v' prefix if present
            echo "Tag release version: $VERSION"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Validate manifest
        run: check-manifest

      - name: Build package
        run: python -m build

      - name: Verify package contents
        run: |
          twine check dist/*
          python -m zipfile -l dist/*.whl
          python -m tarfile -l dist/*.tar.gz

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
          retention-days: 30

  publish-testpypi:
    if: github.event.inputs.environment == 'testpypi' || github.event_name == 'workflow_dispatch'
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: testpypi
      url: https://test.pypi.org/p/serp-forge
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          # Fallback to API token if trusted publishing isn't configured
          username: __token__
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}

  publish-pypi:
    if: github.event_name == 'push' || github.event.inputs.environment == 'pypi'
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/serp-forge
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          # Trusted publishing - no API token needed if configured
          # Fallback to API token if trusted publishing isn't configured
          username: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}

  create-release:
    if: github.event_name == 'push'  # Only create releases for tag pushes
    needs: [build, publish-pypi]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Generate changelog
        id: changelog
        run: |
          # Extract changelog between current and previous tag
          CURRENT_TAG="${{ github.ref_name }}"
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          
          if [[ -n "$PREVIOUS_TAG" ]]; then
            echo "## Changes since $PREVIOUS_TAG" > release_notes.md
            git log --pretty=format:"- %s (%h)" "$PREVIOUS_TAG..$CURRENT_TAG" >> release_notes.md
          else
            echo "## Initial Release" > release_notes.md
            echo "First release of serp-forge" >> release_notes.md
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ needs.build.outputs.package-version }}
          body_path: release_notes.md
          draft: false
          prerelease: ${{ contains(github.ref_name, 'rc') || contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') }}
          files: |
            dist/*.whl
            dist/*.tar.gz
          generate_release_notes: true